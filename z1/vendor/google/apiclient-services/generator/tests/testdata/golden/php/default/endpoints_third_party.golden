=== begin: EccoDomaniIeri.php
<?php
/*
 * Copyright 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

namespace NASA\Service;

use Google\Client;

/**
 * Service definition for EccoDomaniIeri (v1).
 *
 * <p>
 * helloworld API v1.</p>
 *
 * <p>
 * For more information about this service, see the API
 * <a href="http://developers.google.com/appengine" target="_blank">Documentation</a>
 * </p>
 *
 * @author Google, Inc.
 */
class EccoDomaniIeri extends \Google\Service
{
  /** View your email address. */
  const USERINFO_EMAIL =
      "https://www.googleapis.com/auth/userinfo.email";

  public $greetings;
  public $rootUrlTemplate;

  /**
   * Constructs the internal representation of the EccoDomaniIeri service.
   *
   * @param Client|array $clientOrConfig The client used to deliver requests, or a
   *                                     config array to pass to a new Client instance.
   * @param string $rootUrl The root URL used for requests to the service.
   */
  public function __construct($clientOrConfig = [], $rootUrl = null)
  {
    parent::__construct($clientOrConfig);
    $this->rootUrl = $rootUrl ?: 'https://peer-pontus.appspot.com/_ah/api/';
    $this->rootUrlTemplate = $rootUrl ?: 'https://peer-pontus.appspot.com/_ah/api/';
    $this->servicePath = 'helloworld/v1/';
    $this->batchPath = 'batch';
    $this->version = 'v1';
    $this->serviceName = 'helloworld';

    $this->greetings = new EccoDomaniIeri\Resource\Greetings(
        $this,
        $this->serviceName,
        'greetings',
        [
          'methods' => [
            'authed' => [
              'path' => 'hellogreeting/authed',
              'httpMethod' => 'POST',
              'parameters' => [],
            ],'getGreeting' => [
              'path' => 'hellogreeting/{id}',
              'httpMethod' => 'GET',
              'parameters' => [
                'id' => [
                  'location' => 'path',
                  'type' => 'integer',
                  'required' => true,
                ],
              ],
            ],'listGreeting' => [
              'path' => 'hellogreeting',
              'httpMethod' => 'GET',
              'parameters' => [],
            ],'multiply' => [
              'path' => 'hellogreeting/{times}',
              'httpMethod' => 'POST',
              'parameters' => [
                'times' => [
                  'location' => 'path',
                  'type' => 'integer',
                  'required' => true,
                ],
              ],
            ],
          ]
        ]
    );
  }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(EccoDomaniIeri::class, 'NASA_Service_EccoDomaniIeri');
=== end: EccoDomaniIeri.php
=== begin: EccoDomaniIeri/HelloGreeting.php
<?php
/*
 * Copyright 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

namespace NASA\Service\EccoDomaniIeri;

class HelloGreeting extends \Google\Model
{
  /**
   * @var string
   */
  public $message;

  /**
   * @param string
   */
  public function setMessage($message)
  {
    $this->message = $message;
  }
  /**
   * @return string
   */
  public function getMessage()
  {
    return $this->message;
  }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(HelloGreeting::class, 'NASA_Service_EccoDomaniIeri_HelloGreeting');
=== end: EccoDomaniIeri/HelloGreeting.php
=== begin: EccoDomaniIeri/HelloGreetingCollection.php
<?php
/*
 * Copyright 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

namespace NASA\Service\EccoDomaniIeri;

class HelloGreetingCollection extends \Google\Collection
{
  protected $collection_key = 'items';
  protected $itemsType = HelloGreeting::class;
  protected $itemsDataType = 'array';

  /**
   * @param HelloGreeting[]
   */
  public function setItems($items)
  {
    $this->items = $items;
  }
  /**
   * @return HelloGreeting[]
   */
  public function getItems()
  {
    return $this->items;
  }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(HelloGreetingCollection::class, 'NASA_Service_EccoDomaniIeri_HelloGreetingCollection');
=== end: EccoDomaniIeri/HelloGreetingCollection.php
=== begin: EccoDomaniIeri/Resource/Greetings.php
<?php
/*
 * Copyright 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

namespace NASA\Service\EccoDomaniIeri\Resource;

use NASA\Service\EccoDomaniIeri\HelloGreeting;
use NASA\Service\EccoDomaniIeri\HelloGreetingCollection;

/**
 * The "greetings" collection of methods.
 * Typical usage is:
 *  <code>
 *   $helloworldService = new NASA\Service\EccoDomaniIeri(...);
 *   $greetings = $helloworldService->greetings;
 *  </code>
 */
class Greetings extends \Google\Service\Resource
{
  /**
   * (greetings.authed)
   *
   * @param array $optParams Optional parameters.
   * @return HelloGreeting
   * @throws \Google\Service\Exception
   */
  public function authed($optParams = [])
  {
    $params = [];
    $params = array_merge($params, $optParams);
    return $this->call('authed', [$params], HelloGreeting::class);
  }
  /**
   * (greetings.getGreeting)
   *
   * @param int $id
   * @param array $optParams Optional parameters.
   * @return HelloGreeting
   * @throws \Google\Service\Exception
   */
  public function getGreeting($id, $optParams = [])
  {
    $params = ['id' => $id];
    $params = array_merge($params, $optParams);
    return $this->call('getGreeting', [$params], HelloGreeting::class);
  }
  /**
   * (greetings.listGreeting)
   *
   * @param array $optParams Optional parameters.
   * @return HelloGreetingCollection
   * @throws \Google\Service\Exception
   */
  public function listGreeting($optParams = [])
  {
    $params = [];
    $params = array_merge($params, $optParams);
    return $this->call('listGreeting', [$params], HelloGreetingCollection::class);
  }
  /**
   * (greetings.multiply)
   *
   * @param int $times
   * @param HelloGreeting $postBody
   * @param array $optParams Optional parameters.
   * @return HelloGreeting
   * @throws \Google\Service\Exception
   */
  public function multiply($times, HelloGreeting $postBody, $optParams = [])
  {
    $params = ['times' => $times, 'postBody' => $postBody];
    $params = array_merge($params, $optParams);
    return $this->call('multiply', [$params], HelloGreeting::class);
  }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Greetings::class, 'NASA_Service_EccoDomaniIeri_Resource_Greetings');
=== end: EccoDomaniIeri/Resource/Greetings.php
